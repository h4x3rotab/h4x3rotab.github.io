<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | h4x's memo]]></title>
  <link href="http://h4x3rotab.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://h4x3rotab.github.io/"/>
  <updated>2015-01-10T13:27:16+08:00</updated>
  <id>http://h4x3rotab.github.io/</id>
  <author>
    <name><![CDATA[h4x3rotab]]></name>
    <email><![CDATA[h4x3rotab@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 7越狱调试]]></title>
    <link href="http://h4x3rotab.github.io/blog/2014/06/19/ios-7yue-yu-diao-shi/"/>
    <updated>2014-06-19T22:05:43+08:00</updated>
    <id>http://h4x3rotab.github.io/blog/2014/06/19/ios-7yue-yu-diao-shi</id>
    <content type="html"><![CDATA[<p>iOS 7中苹果彻底放弃了对gdb的维护，所以必须用C/S模式来调试程序。</p>

<h1>配置调试环境</h1>

<p>采用的调试环境为gdb-server（iOS 7）+ lldb（OS X）。</p>

<p>在iOS SDK中带有debugserver，我们要做的就是把debugserver打补丁，然后复制到iOS下运行。
完整的教程参考<a href="http://iphonedevwiki.net/index.php/Debugserver">这个链接</a>。</p>

<ol>
<li><p>复制debugserver，使用lipo取出合适的部分，例如运行在armv7设备上：</p>

<pre><code> lipo -thin armv7 debugserver -output dbgserverv7
</code></pre></li>
<li><p>把以下文件保存为ent.xml，下一步ldid会用到它为文件添加权限位：</p>

<p> <!-- language: lang-xml --></p>

<pre><code> &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
 &lt;plist version="1.0"&gt;
 &lt;dict&gt;
     &lt;key&gt;com.apple.springboard.debugapplications&lt;/key&gt;
     &lt;true/&gt;
     &lt;key&gt;get-task-allow&lt;/key&gt;
     &lt;true/&gt;
     &lt;key&gt;task_for_pid-allow&lt;/key&gt;
     &lt;true/&gt;
     &lt;key&gt;run-unsigned-code&lt;/key&gt;
     &lt;true/&gt;
 &lt;/dict&gt;
 &lt;/plist&gt;
</code></pre></li>
<li><p>用ldid进行伪签名，ldid可以用brew安装：</p>

<pre><code> ldid -Sent.xml dbgserverv7
</code></pre></li>
<li><p>把dbgserverv7用任何办法复制到iOS设备上，准备部分就完成了。</p></li>
</ol>


<h1>启动调试</h1>

<p>基本思路是在iOS下运行dbgserver，然后在OS X下运行lldb，连接至iOS。</p>

<ol>
<li><p>在iOS下执行服务器端，在这里监听了端口：</p>

<pre><code> dbgserverv7 0.0.0.0:8888
</code></pre></li>
<li><p>把调试的文件从iOS复制到OS X下，以便lldb载入。当然，如果调试的自己的程序，有了符号表
就可以省略这个步骤了，lldb会自动找到源码。</p></li>
<li><p>在OS X下运行lldb，其实gdb也是可以的。然后在lldb中使用gdb-server命令连接调试服务器：</p>

<pre><code> lldb
 (lldb) gdb-server 192.168.1.11:8888
</code></pre></li>
</ol>


<p>如果没有错误信息，连接就成功建立了。</p>

<h1>LLDB技巧</h1>

<p>初学lldb，可以参考<a href="http://lldb.llvm.org/lldb-gdb.html">这个文档</a>，记载了gdb命令与lldb命令的对应：</p>

<ul>
<li><p>等待进程启动</p>

<pre><code>  (lldb) process attach --name XXXX --waitfor
</code></pre></li>
<li><p>查询符号表</p>

<pre><code>  (lldb) image lookup -s NAME_TO_FIND
</code></pre></li>
<li><p>反汇编函数</p>

<pre><code>  (lldb) disassemble -n FUNCTION_NAME
</code></pre></li>
</ul>


<p>可能还会陆续更新（？）</p>
]]></content>
  </entry>
  
</feed>
